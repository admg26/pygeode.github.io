=====================
Dataset overview
=====================

.. module:: pygeode.dataset

.. class:: Dataset

.. autosummary::

  Dataset.__init__
  Dataset.add
  Dataset.copy
  Dataset.map
  Dataset.remove
  Dataset.rename_vars
  Dataset.replace_vars
  asdataset
  concat

.. automethod:: Dataset.__init__

.. automethod:: Dataset.add

.. automethod:: Dataset.copy

.. automethod:: Dataset.map

.. automethod:: Dataset.remove

.. automethod:: Dataset.rename_vars

.. automethod:: Dataset.replace_vars

.. autofunction:: asdataset

.. autofunction:: concat

Essentially, a Dataset is a collection of variables which are related to each other in some way.  For example, when you load a file into PyGeode, a single Dataset is created, containing all variables from that file.  In most cases, you won't be using Datasets directly in your work.  Instead, you'll probably be picking out the variables you need, and discarding the Dataset structure.

Here's an example of a Dataset, with a single variable:
  >>> from pygeode.tutorial import t1
  >>> print t1
  <Dataset>:
  Vars:
    Temp (lat,lon)  (32,64)
  Axes:
    lat <Lat>      :  85 S to 85 N (32 values)
    lon <Lon>      :  0 E to 354 E (64 values)
  Global Attributes:
    {'history': 'Synthetic Temperature data generated by pygeode'}
This particular Dataset has a single variable inside (named ``Temp``), defined over latitude and longitude.  We can reference a particular :class:`Var` object using a dot (``.``), treating it as a *member* of the Dataset:
  >>> x = t1.Temp
  >>> print x
  <Var 'Temp'>:
    Shape:  (lat,lon)  (32,64)
    Axes:
      lat <Lat>      :  85 S to 85 N (32 values)
      lon <Lon>      :  0 E to 354 E (64 values)
    Attributes:
      {}
    Type:  Add_Var (dtype="float64")


Creating a Dataset
------------------

TODO

Useful attributes
-----------------

.. attribute:: Dataset.vars

  A simple Python list containing all the variables of the Dataset.

  Examples
  --------
    >>> print t1.vars
    [<Var 'Temp'>]

.. attribute:: Dataset.axes

  A list of all the axes from all the Vars in the Dataset.

  Examples
  --------
  Normally, we only see the axis *classes* when printing the list:
    >>> print t1.axes
    [<Lat>, <Lon>]
  But, with a small list comprehension, we can get the names of these particular axes (not that it makes much difference in this dataset):
    >>> print [a.name for a in t1.axes]
    ['lat', 'lon']

.. attribute:: Dataset.atts

  Any metadata associated with the data (sometimes referred to as *global attributes*).

  Examples
  --------
    >>> print t1.atts
    {'history': 'Synthetic Temperature data generated by pygeode'}


Neat tricks
-----------

TODO
